{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore } from '../../firebase/firebase.utils';\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    collectionRef.get().then(snapshot => {\n      const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n      this.setState({\n        loading: false\n      });\n    });\n  };\n};\nexport const fetchCollectionsFailure = error => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START,\n  payload: error\n});","map":{"version":3,"sources":["/Users/jordanblack/Desktop/EcommerceHelio/helio/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","collectionMap","convertCollectionsSnapshotToMap","setState","loading","fetchCollectionsFailure","error","payload"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAAQC,SAAR,QAAwB,+BAAxB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEH,eAAe,CAACI;AADkB,CAAP,CAA9B;AAGP,OAAO,MAAMC,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AACf,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AAEAD,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,YAAMC,aAAa,GAAGC,+BAA+B,CAACF,QAAD,CAArD;AAGA,WAAKG,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACH,KALD;AAMH,GATD;AAUH,CAXM;AAYP,OAAO,MAAMC,uBAAuB,GAAIC,KAAD,KAAY;AAC/Cd,EAAAA,IAAI,EAAEH,eAAe,CAACI,uBADyB;AAE/Cc,EAAAA,OAAO,EAAED;AAFsC,CAAZ,CAAhC","sourcesContent":["import ShopActionTypes from './shop.types'\nimport {firestore} from '../../firebase/firebase.utils'\n\nexport const fetchCollectionsStart = () => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_START\n})\nexport const fetchCollectionsStartAsync = () => {\n    return dispatch => { \n        const collectionRef = firestore.collection('collections');\n\n        collectionRef.get().then(snapshot => {\n            const collectionMap = convertCollectionsSnapshotToMap(snapshot)\n\n\n            this.setState({ loading: false })\n        })\n    }\n}\nexport const fetchCollectionsFailure = (error) => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_START,\n    payload: error\n})\n\n\n"]},"metadata":{},"sourceType":"module"}