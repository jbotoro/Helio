{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { persistStore } from 'redux-persist'; // import thunk from 'redux-thunk'\n\nimport rootReducer from './root-reducer';\nimport createSagaMiddleware from 'redux-saga';\nimport { fetchCollectionsStart } from './shop/shop.sagas';\ni;\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\nexport const persistor = persistStore(store);\nsagaMiddleware.run(fetchCollectionsStart);\nexport default {\n  store,\n  persistor\n};","map":{"version":3,"sources":["/Users/jordanblack/Desktop/EcommerceHelio/helio/src/redux/store.js"],"names":["createStore","applyMiddleware","logger","persistStore","rootReducer","createSagaMiddleware","fetchCollectionsStart","i","sagaMiddleware","middlewares","process","env","NODE_ENV","push","store","persistor","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAAQC,YAAR,QAA2B,eAA3B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAAQC,qBAAR,QAAoC,mBAApC;AACAC,CAAC;AAED,MAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AAEA,MAAMI,WAAW,GAAG,CAACD,cAAD,CAApB;;AAEA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCH,EAAAA,WAAW,CAACI,IAAZ,CAAiBX,MAAjB;AACH;;AAID,OAAO,MAAMY,KAAK,GAAGd,WAAW,CAACI,WAAD,EAAcH,eAAe,CAAC,GAAGQ,WAAJ,CAA7B,CAAzB;AAEP,OAAO,MAAMM,SAAS,GAAGZ,YAAY,CAACW,KAAD,CAA9B;AAEPN,cAAc,CAACQ,GAAf,CAAmBV,qBAAnB;AAEA,eAAe;AAACQ,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger'\nimport {persistStore} from 'redux-persist'\n// import thunk from 'redux-thunk'\nimport rootReducer from './root-reducer';\nimport createSagaMiddleware from 'redux-saga'\nimport {fetchCollectionsStart} from './shop/shop.sagas'\ni\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\nif (process.env.NODE_ENV === \"development\") {\n    middlewares.push(logger)\n}\n\n\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares))\n\nexport const persistor = persistStore(store);\n\nsagaMiddleware.run(fetchCollectionsStart);\n\nexport default {store, persistor};"]},"metadata":{},"sourceType":"module"}